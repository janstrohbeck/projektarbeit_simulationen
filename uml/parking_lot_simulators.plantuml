@startuml

package "IO" {
together {
interface IO << global functions >> {
    +read_entry_request(ER: out EntryRequest);
    +read_exit_request(ER: out ExitRequest);
    +read_entry_sensor_state(ESS: out EntrySensorState);
    +read_exit_sensor_state(ESS: out ExitSensorState);
    +write_signal_state(S: out SignalState);
    +write_entry_gate_state(E: out EntryGateState);
    +write_exit_gate_state(E: out ExitGateState);
}

class SimulatorState << (M,orange) monitor >> {
    -random_seed : Object
    -entry_request : EntryRequest
    -exit_request : ExitRequest
    -entry_sensor_state : EntrySensorState
    -exit_sensor_state : ExitSensorState
    -entry_gate_state : EntryGateState
    -exit_gate_state : ExitGateState
    -signal_state : SignalState
    -car_cnt : Natural
    -entry_queue_cnt : Natural
    -exit_queue_cnt : Natural

    +init_random()

    .. Getters ..
    +get_random() : Natural
    +get_entry_request() : EntryRequest
    +get_exit_request() : ExitRequest
    +get_entry_sensor_state() : EntrySensorState
    +get_exit_sensor_state() : ExitSensorState
    +get_entry_gate_state() : EntryGateState
    +get_exit_gate_state() : ExitGateState
    +get_signal_state() : SignalState
    +get_car_cnt() : SignalState
    +get_entry_queue_cnt() : SignalState
    +get_exit_queue_cnt() : SignalState

    .. Setters ..
    +set_entry_request(ER : EntryRequest)
    +set_exit_request(ER : ExitRequest)
    +set_entry_sensor_state(ER : EntrySensorState)
    +set_exit_sensor_state(ER : ExitSensorState)
    +set_entry_gate_state(ER : EntryGateState)
    +set_exit_gate_state(ER : ExitGateState)
    +set_signal_state(S : SignalState)

    .. Manipulators ..
    +inc_car_cnt()
    +dec_car_cnt()
    +inc_entry_queue_cnt()
    +dec_entry_queue_cnt()
    +inc_exit_queue_cnt()
    +dec_exit_queue_cnt()

    .. Wait methods ..
    +wait_entry_gate_open()
    +wait_exit_gate_open()
    +wait_entry_gate_closed()
    +wait_exit_gate_closed()
}
}

together {
class EntryGateSimulator << (T,#ADD1B2) Thread >> {
    +run()
}

class ExitGateSimulator << (T,#ADD1B2) Thread >> {
    +run()
}

class Logger << (T,#ADD1B2) Thread >> {
    +run()
}
}

class Car << (T,#ADD1B2) Thread >> {
    +run()
}

class RequestQueue {
    +enqueue(timeout_ms : Integer)
    +enqueue()
    +receive()
}

together {
class EntryGateRequestQueue {
}

class ExitGateRequestQueue {
}
}

EntryGateRequestQueue <|-- RequestQueue
ExitGateRequestQueue <|-- RequestQueue

ExitGateSimulator -> ExitGateRequestQueue
EntryGateSimulator -> EntryGateRequestQueue

IO -> SimulatorState
ExitGateSimulator -> SimulatorState
EntryGateSimulator -> SimulatorState

Car -> EntryGateRequestQueue
Car -> ExitGateRequestQueue
Car -> SimulatorState

Logger -> SimulatorState

@enduml
